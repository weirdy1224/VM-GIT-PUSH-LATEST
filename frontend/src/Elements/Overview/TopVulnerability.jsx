import axios from "axios";
import React, { useEffect, useState } from "react";

const SeverityLabel = ({ severity }) => {
  const colors = {
    Critical: "bg-red-800",
    High: "bg-red-600",
    Medium: "bg-orange-400",
    Low: "bg-yellow-400",
  };

  return (
    <span
      className={`${
        colors[severity] || "bg-gray-500"
      } text-white text-xs font-bold px-2 py-1 rounded-full`}
    >
      {severity}
    </span>
  );
};

export default function TopVulnerabilitiesList() {
  const [vulnerabilitiesData, setVulnerabilitiesData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const userId = localStorage.getItem("userId");
  const token = localStorage.getItem("token");

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        if (!userId || !token) {
          throw new Error("User ID or token is missing. Please log in.");
        }

        setLoading(true);
        const response = await axios.get("http://localhost:5000/api/topvul", {
          headers: {
            Authorization: `Bearer ${token}`,
            "X-User-Id": userId,
          },
        });

        if (!response.data.success) {
          throw new Error(response.data.message || "API returned an error");
        }

        setVulnerabilitiesData(response.data.data || []);
        setError(null);
      } catch (error) {
        console.error("Error fetching vulnerabilities:", error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilities();
  }, [userId, token]); // Added token as a dependency

  return (
    <div
      className="vuln_severe w-[70vh]"
      style={{
        width: "600px",
        padding: "20px",
        backgroundColor: "#ffffff",
        borderRadius: "16px",
        boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.1)",
      }}
    >
      <h2 className="text-xl font-bold mb-4">Top Vulnerabilities</h2>
      {loading ? (
        <p className="text-gray-500">Loading vulnerabilities...</p>
      ) : error ? (
        <p className="text-red-500">{error}</p>
      ) : vulnerabilitiesData.length > 0 ? (
        <ul
          className="divide-y divide-gray-200 overflow-y-auto"
          style={{
            maxHeight: "240px",
            paddingRight: "10px",
          }}
        >
          {vulnerabilitiesData.map((vulnerability, index) => (
            <li key={index} className="py-3 flex items-center justify-between">
              <span className="text-gray-800">{vulnerability.bug_name}</span>
              <SeverityLabel severity={vulnerability.severity} />
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-gray-500">No vulnerabilities to display.</p>
      )}
    </div>
  );
}
